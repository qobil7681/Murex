- DocumentID: scalar
  Title: >-
    `$Scalar` Sigil (eg variables)
  CategoryID: parser
  Summary: >-
    Expand values as a scalar
  Description: |-
    The scalar token is used to tell Murex to expand variables and sub-shells as a
    string (ie one single parameter) irrespective of the data that is stored in the
    string.
    
    One common use case where Murex's approach is better is with file names.
    Traditional shells would treat spaces as a new file. Whereas Murex treats
    spaces as any other printable character character.

    ## Variable Syntax

    There are two basic syntaxes. Bare an enclosed.
    
    ### Bare Syntax

    Bare syntax looks like the following:

    ```
    $scalar
    ```
    
    The variable token must be followed with one of the following characters: 
    alpha (`a` to `z`, upper and lower case), numeric (`0` to `1`), underscore
    (`_`) and/or a full stop (`.`).

    ### Enclosed Syntax

    Enclosed syntax looks like the following:

    ```
    $(scalar)
    ```

    Enclosed syntax supports any unicode characters however the variable name
    needs to be surrounded by parenthesis. See examples below.
 
  Examples: |-
    {{ include "gen/includes/parser-var-tokens.inc.md" }}

  Detail: |-
    ### Infixing
    
    Strings and sub-shells can be expanded inside double quotes, brace quotes as
    well as used as barewords. But they cannot be expanded inside single quotes.
    
    ```
    » set example="World!"

    » out Hello $example
    Hello World!

    » out 'Hello $example'
    Hello $example

    » out "Hello $example"
    Hello World!

    » out %(Hello $example)
    Hello World!
    ```

    However you cannot expand arrays (`@`) inside any form of quotation since
    it wouldn't be clear how that value should be expanded relative to the
    other values inside the quote. This is why array and object builders (`%[]`
    and `%{}` respectively) support array variables but string builders (`%()`)
    do not.
  Related:
  - tilde
  - array
  - single-quote
  - double-quote
  - brace-quote
  - out
  - set
  - let
  - ja
  - brace-quote-func
  - reserved-vars



- DocumentID: array
  Title: >-
    `@Array` Sigil
  CategoryID: parser
  Summary: >-
    Expand values as an array
  Description: |-
    The array token is used to tell Murex to expand the string as multiple
    parameters (an array) rather than as a single parameter string.
  Examples: |-
    {{ include "gen/includes/parser-var-tokens.inc.md" }}
  Detail: |-
    ### Infixing
    Since arrays are expanded over multiple parameters, you cannot expand an array
    inside quoted strings like you can with a string variable:

    ```
    » out "foo ${ ja [1..5] } bar"
    foo ["1","2","3","4","5"] bar
    
    » out "foo @{ ja [1..5] } bar"
    foo  1 2 3 4 5  bar

    » %(${ ja [1..5] })
    ["1","2","3","4","5"]   

    » %(@{ ja: [1..5] })
    @{ ja [1..5] } 
    ```
  Related:
  - tilde
  - string
  - single-quote
  - double-quote
  - brace-quote
  - out
  - set
  - ja
  - brace-quote-func
  - reserved-vars



- DocumentID: tilde
  Title: >-
    `~` Home Sigil
  CategoryID: parser
  Summary: >-
    Home directory path variable
  Description: |-
    The tilde token is used as a lazy reference to the users home directory.
  Examples: |-
    ### Current user

    Assuming current username is "bob":

    ```
    » out ~
    /home/bob
    ```

    ### Alternative user

    Assuming "joe" is a valid user on local system:

    ```
    » out ~joe
    /home/joe
    ```

    ### Unhappy path

    If username does not exist, `~` will default to the root path.

    Assuming "foobar" isn't a valid local user:

    ```
    » out ~foobar
    /
    ```
  Detail: |-
    Tilde can be expanded inside double quotes, brace quotes as well as used naked.
    But it cannot be expanded inside single quotes.
    
    ```
    » out ~
    /home/bob

    » out '~'
    ~

    » out "~"
    /home/bob

    » out %(~)
    /home/bob
    ```
  Related:
  - string
  - array
  - single-quote
  - double-quote
  - brace-quote
  - out
  - set
  - ja
  - brace-quote-func
  - reserved-vars